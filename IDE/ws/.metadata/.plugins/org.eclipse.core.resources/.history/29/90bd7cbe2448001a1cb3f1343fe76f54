// CheckStyle: start generated
package com.oracle.truffle.api.test.builtin;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.GeneratedBy;
import com.oracle.truffle.api.interop.ArityException;
import com.oracle.truffle.api.interop.InteropLibrary;
import com.oracle.truffle.api.interop.UnknownIdentifierException;
import com.oracle.truffle.api.interop.UnsupportedMessageException;
import com.oracle.truffle.api.interop.UnsupportedTypeException;
import com.oracle.truffle.api.library.DynamicDispatchLibrary;
import com.oracle.truffle.api.library.LibraryExport;
import com.oracle.truffle.api.library.LibraryFactory;
import com.oracle.truffle.api.nodes.ExplodeLoop;
import com.oracle.truffle.api.nodes.Node;
import com.oracle.truffle.api.nodes.NodeCost;
import com.oracle.truffle.api.test.builtin.BuiltinObject;
import com.oracle.truffle.api.test.builtin.BuiltinObject.BuiltinDescriptor;
import com.oracle.truffle.api.test.builtin.BuiltinObject.BuiltinNode;
import com.oracle.truffle.api.test.builtin.BuiltinObject.InvokeMember;
import com.oracle.truffle.api.test.builtin.BuiltinObject.MemberEntry;
import com.oracle.truffle.api.test.builtin.BuiltinObject.ReadMember;
import java.util.concurrent.locks.Lock;

@GeneratedBy(BuiltinObject.class)
final class BuiltinObjectGen {

    private static final LibraryFactory<DynamicDispatchLibrary> DYNAMIC_DISPATCH_LIBRARY_ = LibraryFactory.resolve(DynamicDispatchLibrary.class);

    static  {
        LibraryExport.register(BuiltinObject.class, new InteropLibraryExports());
    }

    private BuiltinObjectGen() {
    }

    @GeneratedBy(BuiltinObject.class)
    private static final class InteropLibraryExports extends LibraryExport<InteropLibrary> {

        private InteropLibraryExports() {
            super(InteropLibrary.class, BuiltinObject.class, false);
        }

        @Override
        protected InteropLibrary createUncached(Object receiver) {
            assert receiver instanceof BuiltinObject;
            InteropLibrary uncached = new Uncached(receiver);
            return uncached;
        }

        @Override
        protected InteropLibrary createCached(Object receiver) {
            assert receiver instanceof BuiltinObject;
            return new Cached(receiver);
        }

        @GeneratedBy(BuiltinObject.class)
        private static final class Cached extends InteropLibrary {

            private final Class<? extends BuiltinObject> receiverClass_;
            @CompilationFinal private int state_;
            @CompilationFinal private int exclude_;
            @CompilationFinal private BuiltinDescriptor descriptor;
            @CompilationFinal private ReadMemberCachedData readMember_cached_cache;
            @Child private InvokeMemberCachedData invokeMember_cached_cache;

            Cached(Object receiver) {
                this.receiverClass_ = ((BuiltinObject) receiver).getClass();
            }

            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.test.builtin.BuiltinObject'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @ExplodeLoop
            @Override
            public Object readMember(Object arg0Value_, String arg1Value) throws UnsupportedMessageException, UnknownIdentifierException {
                assert assertAdopted();
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b11) != 0 /* is-active doCached(BuiltinObject, String, String, MemberEntry) || doDefault(BuiltinObject, String, BuiltinDescriptor) */) {
                    if ((state & 0b1) != 0 /* is-active doCached(BuiltinObject, String, String, MemberEntry) */) {
                        ReadMemberCachedData s1_ = this.readMember_cached_cache;
                        while (s1_ != null) {
                            if ((s1_.cachedMember_.equals(arg1Value))) {
                                return ReadMember.doCached(arg0Value, arg1Value, s1_.cachedMember_, s1_.cachedEntry_);
                            }
                            s1_ = s1_.next_;
                        }
                    }
                    if ((state & 0b10) != 0 /* is-active doDefault(BuiltinObject, String, BuiltinDescriptor) */) {
                        return ReadMember.doDefault(arg0Value, arg1Value, this.descriptor);
                    }
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return readMemberAndSpecialize(arg0Value, arg1Value);
            }

            private Object readMemberAndSpecialize(BuiltinObject arg0Value, String arg1Value) throws UnknownIdentifierException {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                int exclude = exclude_;
                try {
                    if (((exclude & 0b1)) == 0 /* is-not-excluded doCached(BuiltinObject, String, String, MemberEntry) */) {
                        int count1_ = 0;
                        ReadMemberCachedData s1_ = this.readMember_cached_cache;
                        if ((state & 0b1) != 0 /* is-active doCached(BuiltinObject, String, String, MemberEntry) */) {
                            while (s1_ != null) {
                                if ((s1_.cachedMember_.equals(arg1Value))) {
                                    break;
                                }
                                s1_ = s1_.next_;
                                count1_++;
                            }
                        }
                        if (s1_ == null) {
                            // assert (s1_.cachedMember_.equals(arg1Value));
                            if (count1_ < (BuiltinObject.MEMBER_NAME_CACHE_SIZE)) {
                                s1_ = new ReadMemberCachedData(readMember_cached_cache);
                                s1_.cachedMember_ = (arg1Value);
                                s1_.cachedEntry_ = (BuiltinObject.getDescriptorImpl(arg0Value).lookup(s1_.cachedMember_));
                                this.readMember_cached_cache = s1_;
                                this.state_ = state = state | 0b1 /* add-active doCached(BuiltinObject, String, String, MemberEntry) */;
                            }
                        }
                        if (s1_ != null) {
                            lock.unlock();
                            hasLock = false;
                            return ReadMember.doCached(arg0Value, arg1Value, s1_.cachedMember_, s1_.cachedEntry_);
                        }
                    }
                    if (this.descriptor == null) {
                        this.descriptor = (BuiltinObject.getDescriptorImpl(arg0Value));
                    }
                    this.exclude_ = exclude = exclude | 0b1 /* add-excluded doCached(BuiltinObject, String, String, MemberEntry) */;
                    this.readMember_cached_cache = null;
                    state = state & 0xfffffffe /* remove-active doCached(BuiltinObject, String, String, MemberEntry) */;
                    this.state_ = state = state | 0b10 /* add-active doDefault(BuiltinObject, String, BuiltinDescriptor) */;
                    lock.unlock();
                    hasLock = false;
                    return ReadMember.doDefault(arg0Value, arg1Value, this.descriptor);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public NodeCost getCost() {
                int state = state_;
                if ((state & 0b11) == 0b0) {
                    return NodeCost.UNINITIALIZED;
                } else if (((state & 0b11) & ((state & 0b11) - 1)) == 0 /* is-single-active  */) {
                    ReadMemberCachedData s1_ = this.readMember_cached_cache;
                    if ((s1_ == null || s1_.next_ == null)) {
                        return NodeCost.MONOMORPHIC;
                    }
                }
                return NodeCost.POLYMORPHIC;
            }

            @ExplodeLoop
            @Override
            public Object invokeMember(Object arg0Value_, String arg1Value, Object... arg2Value) throws UnsupportedMessageException, ArityException, UnknownIdentifierException, UnsupportedTypeException {
                assert assertAdopted();
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b1100) != 0 /* is-active doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) || doUncached(BuiltinObject, String, Object[], BuiltinDescriptor) */) {
                    if ((state & 0b100) != 0 /* is-active doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */) {
                        InvokeMemberCachedData s1_ = this.invokeMember_cached_cache;
                        while (s1_ != null) {
                            if ((s1_.cachedMember_.equals(arg1Value))) {
                                return InvokeMember.doCached(arg0Value, arg1Value, arg2Value, s1_.cachedMember_, s1_.cachedEntry_, s1_.node_);
                            }
                            s1_ = s1_.next_;
                        }
                    }
                    if ((state & 0b1000) != 0 /* is-active doUncached(BuiltinObject, String, Object[], BuiltinDescriptor) */) {
                        return InvokeMember.doUncached(arg0Value, arg1Value, arg2Value, this.descriptor);
                    }
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return invokeMemberAndSpecialize(arg0Value, arg1Value, arg2Value);
            }

            private Object invokeMemberAndSpecialize(BuiltinObject arg0Value, String arg1Value, Object[] arg2Value) throws ArityException, UnsupportedTypeException, UnknownIdentifierException {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                int exclude = exclude_;
                try {
                    if (((exclude & 0b10)) == 0 /* is-not-excluded doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */) {
                        int count1_ = 0;
                        InvokeMemberCachedData s1_ = this.invokeMember_cached_cache;
                        if ((state & 0b100) != 0 /* is-active doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */) {
                            while (s1_ != null) {
                                if ((s1_.cachedMember_.equals(arg1Value))) {
                                    break;
                                }
                                s1_ = s1_.next_;
                                count1_++;
                            }
                        }
                        if (s1_ == null) {
                            // assert (s1_.cachedMember_.equals(arg1Value));
                            if (count1_ < (BuiltinObject.MEMBER_NAME_CACHE_SIZE)) {
                                s1_ = super.insert(new InvokeMemberCachedData(invokeMember_cached_cache));
                                s1_.cachedMember_ = (arg1Value);
                                s1_.cachedEntry_ = (BuiltinObject.getDescriptorImpl(arg0Value).lookup(s1_.cachedMember_));
                                s1_.node_ = s1_.insertAccessor((InvokeMember.createNode(s1_.cachedEntry_)));
                                this.invokeMember_cached_cache = s1_;
                                this.state_ = state = state | 0b100 /* add-active doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */;
                            }
                        }
                        if (s1_ != null) {
                            lock.unlock();
                            hasLock = false;
                            return InvokeMember.doCached(arg0Value, arg1Value, arg2Value, s1_.cachedMember_, s1_.cachedEntry_, s1_.node_);
                        }
                    }
                    if (this.descriptor == null) {
                        this.descriptor = (BuiltinObject.getDescriptorImpl(arg0Value));
                    }
                    this.exclude_ = exclude = exclude | 0b10 /* add-excluded doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */;
                    this.invokeMember_cached_cache = null;
                    state = state & 0xfffffffb /* remove-active doCached(BuiltinObject, String, Object[], String, MemberEntry, BuiltinNode) */;
                    this.state_ = state = state | 0b1000 /* add-active doUncached(BuiltinObject, String, Object[], BuiltinDescriptor) */;
                    lock.unlock();
                    hasLock = false;
                    return InvokeMember.doUncached(arg0Value, arg1Value, arg2Value, this.descriptor);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public boolean hasMembers(Object receiver) {
                assert assertAdopted();
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return (CompilerDirectives.castExact(receiver, receiverClass_)).hasMembers();
            }

            @Override
            public Object getMembers(Object arg0Value_, boolean arg1Value) throws UnsupportedMessageException {
                assert assertAdopted();
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b10000) != 0 /* is-active getMembers(BuiltinObject, boolean, BuiltinDescriptor) */) {
                    return arg0Value.getMembers(arg1Value, this.descriptor);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return getMembersNode_AndSpecialize(arg0Value, arg1Value);
            }

            private Object getMembersNode_AndSpecialize(BuiltinObject arg0Value, boolean arg1Value) {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                try {
                    if (this.descriptor == null) {
                        this.descriptor = (BuiltinObject.getDescriptorImpl(arg0Value));
                    }
                    this.state_ = state = state | 0b10000 /* add-active getMembers(BuiltinObject, boolean, BuiltinDescriptor) */;
                    lock.unlock();
                    hasLock = false;
                    return arg0Value.getMembers(arg1Value, this.descriptor);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public boolean isMemberReadable(Object arg0Value_, String arg1Value) {
                assert assertAdopted();
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b100000) != 0 /* is-active isMemberExisting(BuiltinObject, String, BuiltinDescriptor) */) {
                    return arg0Value.isMemberExisting(arg1Value, this.descriptor);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return isMemberExistingNode_AndSpecialize(arg0Value, arg1Value);
            }

            private boolean isMemberExistingNode_AndSpecialize(BuiltinObject arg0Value, String arg1Value) {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                try {
                    if (this.descriptor == null) {
                        this.descriptor = (BuiltinObject.getDescriptorImpl(arg0Value));
                    }
                    this.state_ = state = state | 0b100000 /* add-active isMemberExisting(BuiltinObject, String, BuiltinDescriptor) */;
                    lock.unlock();
                    hasLock = false;
                    return arg0Value.isMemberExisting(arg1Value, this.descriptor);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public boolean isMemberInvocable(Object arg0Value_, String arg1Value) {
                assert assertAdopted();
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b100000) != 0 /* is-active isMemberExisting(BuiltinObject, String, BuiltinDescriptor) */) {
                    return arg0Value.isMemberExisting(arg1Value, this.descriptor);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return isMemberExistingNode_AndSpecialize(arg0Value, arg1Value);
            }

            @GeneratedBy(BuiltinObject.class)
            private static final class ReadMemberCachedData {

                @CompilationFinal ReadMemberCachedData next_;
                @CompilationFinal String cachedMember_;
                @CompilationFinal MemberEntry cachedEntry_;

                ReadMemberCachedData(ReadMemberCachedData next_) {
                    this.next_ = next_;
                }

            }
            @GeneratedBy(BuiltinObject.class)
            private static final class InvokeMemberCachedData extends Node {

                @Child InvokeMemberCachedData next_;
                @CompilationFinal String cachedMember_;
                @CompilationFinal MemberEntry cachedEntry_;
                @Child BuiltinNode node_;

                InvokeMemberCachedData(InvokeMemberCachedData next_) {
                    this.next_ = next_;
                }

                @Override
                public NodeCost getCost() {
                    return NodeCost.NONE;
                }

                <T extends Node> T insertAccessor(T node) {
                    return super.insert(node);
                }

            }
        }
        @GeneratedBy(BuiltinObject.class)
        private static final class Uncached extends InteropLibrary {

            private final Class<? extends BuiltinObject> receiverClass_;

            Uncached(Object receiver) {
                this.receiverClass_ = ((BuiltinObject) receiver).getClass();
            }

            @TruffleBoundary
            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.test.builtin.BuiltinObject'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public boolean isAdoptable() {
                return false;
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MEGAMORPHIC;
            }

            @TruffleBoundary
            @Override
            public Object readMember(Object arg0Value_, String arg1Value) throws UnknownIdentifierException {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = (BuiltinObject) arg0Value_;
                return ReadMember.doDefault(arg0Value, arg1Value, (BuiltinObject.getDescriptorImpl(arg0Value)));
            }

            @TruffleBoundary
            @Override
            public Object invokeMember(Object arg0Value_, String arg1Value, Object... arg2Value) throws UnsupportedTypeException, ArityException, UnknownIdentifierException {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = (BuiltinObject) arg0Value_;
                return InvokeMember.doUncached(arg0Value, arg1Value, arg2Value, (BuiltinObject.getDescriptorImpl(arg0Value)));
            }

            @TruffleBoundary
            @Override
            public boolean hasMembers(Object receiver) {
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return ((BuiltinObject) receiver) .hasMembers();
            }

            @TruffleBoundary
            @Override
            public Object getMembers(Object arg0Value_, boolean arg1Value) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = (BuiltinObject) arg0Value_;
                return arg0Value.getMembers(arg1Value, (BuiltinObject.getDescriptorImpl(arg0Value)));
            }

            @TruffleBoundary
            @Override
            public boolean isMemberReadable(Object arg0Value_, String arg1Value) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = (BuiltinObject) arg0Value_;
                return arg0Value.isMemberExisting(arg1Value, (BuiltinObject.getDescriptorImpl(arg0Value)));
            }

            @TruffleBoundary
            @Override
            public boolean isMemberInvocable(Object arg0Value_, String arg1Value) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                BuiltinObject arg0Value = (BuiltinObject) arg0Value_;
                return arg0Value.isMemberExisting(arg1Value, (BuiltinObject.getDescriptorImpl(arg0Value)));
            }

        }
    }
}
