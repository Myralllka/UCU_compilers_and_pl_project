// CheckStyle: start generated
package com.oracle.truffle.api.library.test;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.GeneratedBy;
import com.oracle.truffle.api.library.DynamicDispatchLibrary;
import com.oracle.truffle.api.library.LibraryExport;
import com.oracle.truffle.api.library.LibraryFactory;
import com.oracle.truffle.api.library.test.ExportSubclassTest.ExportSubclassLibrary;
import com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass3;
import com.oracle.truffle.api.nodes.NodeCost;
import java.util.concurrent.locks.Lock;

@GeneratedBy(SubClass3.class)
final class SubClass3Gen {

    private static final LibraryFactory<DynamicDispatchLibrary> DYNAMIC_DISPATCH_LIBRARY_ = LibraryFactory.resolve(DynamicDispatchLibrary.class);

    static  {
        LibraryExport.register(SubClass3.class, new ExportSubclassLibraryExports());
    }

    private SubClass3Gen() {
    }

    @GeneratedBy(SubClass3.class)
    private static final class ExportSubclassLibraryExports extends LibraryExport<ExportSubclassLibrary> {

        private ExportSubclassLibraryExports() {
            super(ExportSubclassLibrary.class, SubClass3.class, false);
        }

        @Override
        protected ExportSubclassLibrary createUncached(Object receiver) {
            assert receiver instanceof SubClass3;
            ExportSubclassLibrary uncached = new Uncached(receiver);
            return uncached;
        }

        @Override
        protected ExportSubclassLibrary createCached(Object receiver) {
            assert receiver instanceof SubClass3;
            return new Cached(receiver);
        }

        @GeneratedBy(SubClass3.class)
        private static final class Cached extends ExportSubclassLibrary {

            private final Class<? extends SubClass3> receiverClass_;
            @CompilationFinal private int state_;
            @CompilationFinal private int subValue_;

            Cached(Object receiver) {
                this.receiverClass_ = ((SubClass3) receiver).getClass();
            }

            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass3'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public String m1(Object arg0Value_) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass3 arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if (state != 0 /* is-active m01(SubClass3, int) */) {
                    return arg0Value.m01(this.subValue_);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return executeAndSpecialize(arg0Value);
            }

            private String executeAndSpecialize(SubClass3 arg0Value) {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                try {
                    this.subValue_ = (42);
                    this.state_ = state = state | 0b1 /* add-active m01(SubClass3, int) */;
                    lock.unlock();
                    hasLock = false;
                    return arg0Value.m01(this.subValue_);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public NodeCost getCost() {
                int state = state_;
                if (state == 0b0) {
                    return NodeCost.UNINITIALIZED;
                } else {
                    return NodeCost.MONOMORPHIC;
                }
            }

            @Override
            public String m0(Object arg0Value_) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass3 arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if (state != 0 /* is-active m01(SubClass3, int) */) {
                    return arg0Value.m01(this.subValue_);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return executeAndSpecialize(arg0Value);
            }

        }
        @GeneratedBy(SubClass3.class)
        private static final class Uncached extends ExportSubclassLibrary {

            private final Class<? extends SubClass3> receiverClass_;

            Uncached(Object receiver) {
                this.receiverClass_ = ((SubClass3) receiver).getClass();
            }

            @TruffleBoundary
            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass3'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public boolean isAdoptable() {
                return false;
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MEGAMORPHIC;
            }

            @TruffleBoundary
            @Override
            public String m1(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass3 arg0Value = (SubClass3) arg0Value_;
                return arg0Value.m01((42));
            }

            @TruffleBoundary
            @Override
            public String m0(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass3 arg0Value = (SubClass3) arg0Value_;
                return arg0Value.m01((42));
            }

        }
    }
}
