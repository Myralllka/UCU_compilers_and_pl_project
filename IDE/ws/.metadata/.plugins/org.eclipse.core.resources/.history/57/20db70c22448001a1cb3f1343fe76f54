// CheckStyle: start generated
package com.oracle.truffle.api.library.test.otherPackage;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.GeneratedBy;
import com.oracle.truffle.api.dsl.UnsupportedSpecializationException;
import com.oracle.truffle.api.library.DynamicDispatchLibrary;
import com.oracle.truffle.api.library.LibraryExport;
import com.oracle.truffle.api.library.LibraryFactory;
import com.oracle.truffle.api.library.test.otherPackage.OtherPackageBaseObject;
import com.oracle.truffle.api.library.test.otherPackage.OtherPackageLibrary;
import com.oracle.truffle.api.library.test.otherPackage.OtherPackageBaseObject.M2;
import com.oracle.truffle.api.library.test.otherPackage.OtherPackageBaseObject.M3;
import com.oracle.truffle.api.nodes.ExplodeLoop;
import com.oracle.truffle.api.nodes.Node;
import com.oracle.truffle.api.nodes.NodeCost;
import java.util.concurrent.locks.Lock;

@GeneratedBy(OtherPackageBaseObject.class)
final class OtherPackageBaseObjectGen {

    private static final LibraryFactory<DynamicDispatchLibrary> DYNAMIC_DISPATCH_LIBRARY_ = LibraryFactory.resolve(DynamicDispatchLibrary.class);

    static  {
        LibraryExport.register(OtherPackageBaseObject.class, new OtherPackageLibraryExports());
    }

    private OtherPackageBaseObjectGen() {
    }

    @GeneratedBy(OtherPackageBaseObject.class)
    private static final class OtherPackageLibraryExports extends LibraryExport<OtherPackageLibrary> {

        private OtherPackageLibraryExports() {
            super(OtherPackageLibrary.class, OtherPackageBaseObject.class, false);
        }

        @Override
        protected OtherPackageLibrary createUncached(Object receiver) {
            assert receiver instanceof OtherPackageBaseObject;
            OtherPackageLibrary uncached = new Uncached(receiver);
            return uncached;
        }

        @Override
        protected OtherPackageLibrary createCached(Object receiver) {
            assert receiver instanceof OtherPackageBaseObject;
            return new Cached(receiver);
        }

        @GeneratedBy(OtherPackageBaseObject.class)
        private static final class Cached extends OtherPackageLibrary {

            private final Class<? extends OtherPackageBaseObject> receiverClass_;
            @CompilationFinal private int state_;
            @CompilationFinal private M3DefaultData m3_default_cache;
            @CompilationFinal private int m1Node__cachedValue_;

            Cached(Object receiver) {
                this.receiverClass_ = ((OtherPackageBaseObject) receiver).getClass();
            }

            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.otherPackage.OtherPackageBaseObject'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public String m2(Object arg0Value_) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                return M2.doDefault(arg0Value);
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MONOMORPHIC;
            }

            @ExplodeLoop
            @Override
            public String m3(Object arg0Value_) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b1) != 0 /* is-active doDefault(OtherPackageBaseObject, int) */) {
                    M3DefaultData s1_ = this.m3_default_cache;
                    while (s1_ != null) {
                        if ((arg0Value.value == s1_.value_)) {
                            return M3.doDefault(arg0Value, s1_.value_);
                        }
                        s1_ = s1_.next_;
                    }
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return m3AndSpecialize(arg0Value);
            }

            private String m3AndSpecialize(OtherPackageBaseObject arg0Value) {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                try {
                    int count1_ = 0;
                    M3DefaultData s1_ = this.m3_default_cache;
                    if ((state & 0b1) != 0 /* is-active doDefault(OtherPackageBaseObject, int) */) {
                        while (s1_ != null) {
                            if ((arg0Value.value == s1_.value_)) {
                                break;
                            }
                            s1_ = s1_.next_;
                            count1_++;
                        }
                    }
                    if (s1_ == null) {
                        // assert (arg0Value.value == s1_.value_);
                        if (count1_ < (3)) {
                            s1_ = new M3DefaultData(m3_default_cache);
                            s1_.value_ = (arg0Value.value);
                            this.m3_default_cache = s1_;
                            this.state_ = state = state | 0b1 /* add-active doDefault(OtherPackageBaseObject, int) */;
                        }
                    }
                    if (s1_ != null) {
                        lock.unlock();
                        hasLock = false;
                        return M3.doDefault(arg0Value, s1_.value_);
                    }
                    throw new UnsupportedSpecializationException(this, new Node[] {null}, arg0Value);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @Override
            public String m0(Object receiver) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return (CompilerDirectives.castExact(receiver, receiverClass_)).m0();
            }

            @Override
            public String m1(Object arg0Value_) {
                assert getRootNode() != null : "Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.";
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                int state = state_;
                if ((state & 0b10) != 0 /* is-active m1(OtherPackageBaseObject, int) */) {
                    return arg0Value.m1(this.m1Node__cachedValue_);
                }
                CompilerDirectives.transferToInterpreterAndInvalidate();
                return m1Node_AndSpecialize(arg0Value);
            }

            private String m1Node_AndSpecialize(OtherPackageBaseObject arg0Value) {
                Lock lock = getLock();
                boolean hasLock = true;
                lock.lock();
                int state = state_;
                try {
                    this.m1Node__cachedValue_ = (arg0Value.value);
                    this.state_ = state = state | 0b10 /* add-active m1(OtherPackageBaseObject, int) */;
                    lock.unlock();
                    hasLock = false;
                    return arg0Value.m1(this.m1Node__cachedValue_);
                } finally {
                    if (hasLock) {
                        lock.unlock();
                    }
                }
            }

            @GeneratedBy(OtherPackageBaseObject.class)
            private static final class M3DefaultData {

                @CompilationFinal M3DefaultData next_;
                @CompilationFinal int value_;

                M3DefaultData(M3DefaultData next_) {
                    this.next_ = next_;
                }

            }
        }
        @GeneratedBy(OtherPackageBaseObject.class)
        private static final class Uncached extends OtherPackageLibrary {

            private final Class<? extends OtherPackageBaseObject> receiverClass_;

            Uncached(Object receiver) {
                this.receiverClass_ = ((OtherPackageBaseObject) receiver).getClass();
            }

            @TruffleBoundary
            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.otherPackage.OtherPackageBaseObject'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public boolean isAdoptable() {
                return false;
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MEGAMORPHIC;
            }

            @TruffleBoundary
            @Override
            public String m2(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = (OtherPackageBaseObject) arg0Value_;
                return M2.doDefault(arg0Value);
            }

            @TruffleBoundary
            @Override
            public String m3(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = (OtherPackageBaseObject) arg0Value_;
                // assert (arg0Value.value == (arg0Value.value));
                return M3.doDefault(arg0Value, (arg0Value.value));
            }

            @TruffleBoundary
            @Override
            public String m0(Object receiver) {
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return ((OtherPackageBaseObject) receiver) .m0();
            }

            @TruffleBoundary
            @Override
            public String m1(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                OtherPackageBaseObject arg0Value = (OtherPackageBaseObject) arg0Value_;
                return arg0Value.m1((arg0Value.value));
            }

        }
    }
}
