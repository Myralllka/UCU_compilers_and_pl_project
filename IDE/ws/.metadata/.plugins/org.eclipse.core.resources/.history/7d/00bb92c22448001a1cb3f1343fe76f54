// CheckStyle: start generated
package com.oracle.truffle.api.library.test;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.GeneratedBy;
import com.oracle.truffle.api.library.DynamicDispatchLibrary;
import com.oracle.truffle.api.library.LibraryExport;
import com.oracle.truffle.api.library.LibraryFactory;
import com.oracle.truffle.api.library.test.ExportSubclassTest.ExportSubclassLibrary;
import com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass1;
import com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass1.M0;
import com.oracle.truffle.api.nodes.NodeCost;

@GeneratedBy(SubClass1.class)
final class SubClass1Gen {

    private static final LibraryFactory<DynamicDispatchLibrary> DYNAMIC_DISPATCH_LIBRARY_ = LibraryFactory.resolve(DynamicDispatchLibrary.class);

    static  {
        LibraryExport.register(SubClass1.class, new ExportSubclassLibraryExports());
    }

    private SubClass1Gen() {
    }

    @GeneratedBy(SubClass1.class)
    private static final class ExportSubclassLibraryExports extends LibraryExport<ExportSubclassLibrary> {

        private ExportSubclassLibraryExports() {
            super(ExportSubclassLibrary.class, SubClass1.class, false);
        }

        @Override
        protected ExportSubclassLibrary createUncached(Object receiver) {
            assert receiver instanceof SubClass1;
            ExportSubclassLibrary uncached = new Uncached(receiver);
            return uncached;
        }

        @Override
        protected ExportSubclassLibrary createCached(Object receiver) {
            assert receiver instanceof SubClass1;
            return new Cached(receiver);
        }

        @GeneratedBy(SubClass1.class)
        private static final class Cached extends ExportSubclassLibrary {

            private final Class<? extends SubClass1> receiverClass_;

            Cached(Object receiver) {
                this.receiverClass_ = ((SubClass1) receiver).getClass();
            }

            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass1'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public String m1(Object receiver) {
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return (CompilerDirectives.castExact(receiver, receiverClass_)).m1();
            }

            @Override
            public String m0(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass1 arg0Value = CompilerDirectives.castExact(arg0Value_, receiverClass_);
                return M0.doDefault(arg0Value);
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MONOMORPHIC;
            }

        }
        @GeneratedBy(SubClass1.class)
        private static final class Uncached extends ExportSubclassLibrary {

            private final Class<? extends SubClass1> receiverClass_;

            Uncached(Object receiver) {
                this.receiverClass_ = ((SubClass1) receiver).getClass();
            }

            @TruffleBoundary
            @Override
            public boolean accepts(Object receiver) {
                assert receiver.getClass() != this.receiverClass_ || DYNAMIC_DISPATCH_LIBRARY_.getUncached().dispatch(receiver) == null : "Invalid library export 'com.oracle.truffle.api.library.test.ExportSubclassTest.SubClass1'. Exported receiver with dynamic dispatch found but not expected.";
                return receiver.getClass() == this.receiverClass_;
            }

            @Override
            public boolean isAdoptable() {
                return false;
            }

            @Override
            public NodeCost getCost() {
                return NodeCost.MEGAMORPHIC;
            }

            @TruffleBoundary
            @Override
            public String m1(Object receiver) {
                assert this.accepts(receiver) : "Invalid library usage. Library does not accept given receiver.";
                return ((SubClass1) receiver) .m1();
            }

            @TruffleBoundary
            @Override
            public String m0(Object arg0Value_) {
                assert this.accepts(arg0Value_) : "Invalid library usage. Library does not accept given receiver.";
                SubClass1 arg0Value = (SubClass1) arg0Value_;
                return M0.doDefault(arg0Value);
            }

        }
    }
}
