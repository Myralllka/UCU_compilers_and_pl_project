package org.truffle.cs.mj.nodes;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;

@NodeChild(value = "x", type = MJExpresionNode.class)
@NodeChild(value = "y", type = MJExpresionNode.class)
public abstract class MJBinaryNode extends MJExpresionNode {

    public static abstract class LessThenNode extends MJBinaryNode {

        @Specialization
        public boolean LessThen(int x, int y) {
            return x < y;
        }
    }
    
    public static abstract class EqualThenNodedNode extends MJBinaryNode {

        @Specialization
        public boolean LessThen(int x, int y) {
            return x < y;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    public static abstract class AddNode extends MJBinaryNode {

        @Specialization
        public int add(int x, int y) {
            return x + y;
        }
    }

    public static abstract class SubNode extends MJBinaryNode {

        @Specialization
        public int sub(int x, int y) {
            return x - y;
        }
    }

    public static abstract class MulNode extends MJBinaryNode {

        @Specialization
        public int mul(int x, int y) {
            return x * y;
        }
    }

    public static abstract class DivNode extends MJBinaryNode {

        @Specialization
        public int div(int x, int y) {
            return x / y;
        }
    }

    public static abstract class ModNode extends MJBinaryNode {

        @Specialization
        public int mod(int x, int y) {
            return x % y;
        }
    }

}
